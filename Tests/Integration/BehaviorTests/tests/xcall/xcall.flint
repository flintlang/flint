contract XCall {

}

external trait ExternalContract {
  func otherOne(value: uint8)
  func emitCheck(value: uint8) -> uint8
}

XCall :: caller <- (any) {
  public init() {

  }

  public func callExternal(contractToCall: Address) -> Int{
    let externalContract: ExternalContract = ExternalContract(address: contractToCall)

    do {
      call externalContract.otherOne(value: 0 as! uint8)
      //let ret: Int = (call externalContract.emitCheck(value: 0 as! uint8)) as! Int
    } catch is ExternalCallError {
      let a: Int = 1
    }

    return 0
  } 
}

