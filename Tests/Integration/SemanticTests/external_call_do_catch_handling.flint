// RUN: %flintc %s --verify

contract Contract {

}

Contract :: (any) {
  func someFunc() {

  }

  func someReturningFunc() -> Int {
    return 42
  }

  func someFuncWithParam(param: Int) {

  }

  public init() {
    // FIXME: test disabled (see #138)
    //do { // expected -error {{No 'call' found in do-catch block}}
      do {
        call self.someFunc()
      } catch is Error {

      }
    //} catch is Error {
    //}

    do { 
      call self.someFunc()
      // FIXME: test disabled (see #138)
      //do { // expected -error {{No 'call' found in do-catch block}}
      //} catch is Error {
      //} 
    } catch is Error {

    }

    do {
      call self.someFunc()
      do {
        call self.someFunc()
      } catch is Error {

      } 
    } catch is Error {

    }

    // FIXME: tests disabled (see #138)
    //do { // expected -error {{No 'call' found in do-catch block}}
    //  call! self.someFunc() // expected -error {{Cannot use 'call!' inside do-catch block}}     
    //} catch is Error {
    //}
    //
    //do { // expected -error {{No 'call' found in do-catch block}}
    //} catch is Error {
    //}

    do {
      if let x: Int = call? self.someReturningFunc() { 

      } else {

      }
      call self.someFunc()
    } catch is Error {

    }

    call? self.someReturningFunc() // expected-error {{Only inside 'if let ... = call?' may 'call?' be used}}

    if let x: Int = call? self.someReturningFunc() { 

    } 

    do {
      if let x: Int = call self.someReturningFunc() { // expected-error {{'if let' construct may only be used with 'call?'}}

      }
    } catch is Error {

    }

    if let y: Int = call! self.someReturningFunc() { // expected-error {{'if let' construct may only be used with 'call?'}}

    }

    // FIXME: test disabled (see #138)
    //do {
    //  call self.someReturningFunc() // expected -error {{Return value of external call cannot be ignored.}}
    //} catch is Error {
    //}

    do {
      let x: Int = call self.someReturningFunc()
      self.someFuncWithParam(param: call self.someReturningFunc())
    } catch is Error {

    }

    // FIXME: test disabled (see #138)
    //call! self.someReturningFunc() // expected -error {{Return value of external call cannot be ignored.}} 
    self.someFuncWithParam(param: call! self.someReturningFunc())
    
    let x: Int = call! self.someReturningFunc() 
  }
}
