//RUN: %flintc %s --verify

contract Caller {
  var owner: Address
  var owners: [Address]
  var lastIndex: Int = 0
}

Caller :: (any) {
  public init(caller: Address) {
    self.owner = caller
    owners[lastIndex] = caller
    lastIndex += 1
  }
}

Caller :: (owners) {
  func restrictedFunc() {}
  func restrictedInt() -> Int {
    return 42
  }
  func restrictedCheck() -> Bool {
    return true
  }

  public func getOwner(index: Int) -> Address {
    return owners[index]
  }
}

Caller :: (owner) {
  public mutating func addOwner(newOwner: Address) {
    owners[lastIndex] = newOwner
    lastIndex += 1
  }
}

Caller :: (any) {
  public func ifYouCan() -> Bool {
    try! restrictedFunc()
    return true
  }

  public func ifYouCan2() -> Bool {
    let bool: Bool = try! restrictedCheck()
    return bool
  }

  public func ifYouCan3() -> Bool {
    return try! restrictedCheck()
  }

  public func ifYouCan4() -> Int {
    let int: Int = try! restrictedInt()
    return int
  }

  public func ifYouCan5() -> Int {
    return try! restrictedInt()
  }

  public func check() -> Bool {
    return try? restrictedFunc()
  }

  public func check2() -> Bool {
    let res: Bool = try? restrictedInt()
    return res
  }
}
