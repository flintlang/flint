struct A {
  var x: Int = 0
  var y: Bool = false

  func getX() -> Int {
    return x
  }

  mutating func setX(x: Int) {
    self.x = x
  }

  func getY() -> Int {
    return getX()
  }
}

struct B {
  var x: A = A()
  var y: Int = 0

  func getXx() -> Int {
    return x.getX()
  }

  func getXx2() -> Int {
    return x.getY()
  }

  mutating func setXx(y: Int) {
    x.setX(y)
  }
}

contract C {
  var a: A = A()
  var arr: ArrayWithExplicitSize = ArrayWithExplicitSize()
  var b: B = B()
  var c: B = B()
  let d: Int = 5
  var e: Bool = true
}

C :: (any) {
  public init() {}

  public func getAx() -> Int {
    return a.x
  }

  public mutating func setAx(x: Int) {
    a.x = x
  }

  public func getAy() -> Bool {
    return a.y
  }

  public mutating func setAy(y: Bool) {
    a.y = y
  }

  public func getBxx() -> Int {
    return b.x.x
  }

  public mutating func setBxx(x: Int) {
    b.x.x = x
  }

  public func getBxx2() -> Int {
    return b.getXx()
  }

  public func getBxx3() -> Int {
    return b.getXx2()
  }

  public mutating func setBxx2(x: Int) {
    b.setXx(x)
  }

  public mutating func setBxx3(x: Int) {
    setB(&b, x)
  }

  public mutating func setCxx(x: Int) {
    c.setXx(x)
  }

  public mutating func setCxx2(x: Int) {
    setB(&c, x)
  }

  public func getCxx() -> Int {
    return c.getXx()
  }

  mutating func setB(b: inout B, x: Int) {
    b.setXx(x)
  }

  public func getBxy() -> Bool {
    return b.x.y
  }

  public mutating func setBxy(y: Bool) {
    b.x.y = y
  }

  public func getBy() -> Int {
    return b.y
  }

  public mutating func setBy(y: Int) {
    b.y = y
  }

  public mutating func append(x: Int) {
    arr.add(x)
  }

  public func get(x: Int) -> Int {
    return arr.get(x)
  }

  public func getSize() -> Int {
    return arr.size
  }

  public func getD() -> Int {
    return d
  }

  public func getE() -> Bool {
    return true
  }
}

struct ArrayWithExplicitSize {
  var elements: [Int] = []
  var size: Int = 0

  mutating func add(value: Int) {
    elements[size] = value
    size += 1
  }

  func get(n: Int) -> Int {
    return elements[n]
  }

  func getSize() -> Int {
    return size
  }
}
