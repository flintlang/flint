// RUN: %flintc %s --verify

enum A: Int {}

enum B: Bool {
  case alpha // expected-error {{Cannot infer hidden values in case 'alpha' for hidden type 'Bool'}}
}

enum B: Int { // expected-error {{Invalid redeclaration of 'B'}}
  case beta
}

enum J: String {
  case a // expected-error {{Cannot infer hidden values in case 'a' for hidden type 'String'}}
}

enum K: Int {
  case a
  case b
  case c
}

enum L: Int {
  case a
}

contract Test {
  var ints: K
}

Test :: (any) {
  public init() {
    ints = K.a
  }

  public func type1() -> Int {
    return K.a + K.c // expected-error {{Cannot convert expression of type 'K' to expected return type 'Int'}}
    // expected-error@-1 {{Incompatible use of operator '+' on values of types 'K' and 'K'}}
  }

  public func type1a() -> Int {
    return K.a + L.a // expected-error {{Cannot convert expression of type 'L' to expected return type 'Int'}}
    // expected-error@-1 {{Incompatible use of operator '+' on values of types 'K' and 'L'}}
  }


  public func type1b() -> Int {
    return K.a + 1 // expected-error {{Incompatible use of operator '+' on values of types 'K' and 'Int'}}
  }

  public func type2() -> Int {
    return K.a // expected-error {{Cannot convert expression of type 'K' to expected return type 'Int'}}
  }

  public func type3() {
    var phone: K

    phone = K.a
    phone = K.b
    phone = K // expected-error {{Cannot reference enum 'K' alone}}
    phone = K.d // expected-error {{Use of undeclared identifier 'd'}}
  }

  public func type4() {
    var integer: K

    integer = K.a
    integer = L.a // expected-error {{Incompatible assignment between values of type 'K' and 'L'}}
    integer = K.c
  }

  public func type5() -> K { // expected-error {{Type 'K' not valid as return type in function 'type5'}}
    var integer: Int

    integer = 1

    return integer // expected-error {{Cannot convert expression of type 'Int' to expected return type 'K'}}
  }
}
