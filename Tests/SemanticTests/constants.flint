// RUN: %flintc %s --verify

contract Constants {
  var a: Int // expected-note {{'a' is uninitialized}}
  var b: Int = "a" // expected-error {{Incompatible assignment between values of type 'Int' and 'String'}}
  let c: Int = 2 + 3
  let d: Int = 3
  let e: Int // expected-note {{'e' is uninitialized}}
  var f: [Int] = []
  let g: [Int] = []
  var h: [Int] = []
}

Constants :: (any) {
  public init() {} // expected-error {{Return from initializer without initializing all properties}}

  mutating func foo() {
    let a: Int = 2 // expected-note {{'a' is declared here}}
    a = 3 // expected-error {{Cannot reassign to value: 'a' is a 'let' constant}}

    let b: Int = a
    self.a = 3

    if true {
      a = 5 // expected-error {{Cannot reassign to value: 'a' is a 'let' constant}}
    } else {
      a = 7 // expected-error {{Cannot reassign to value: 'a' is a 'let' constant}}
    }

    d = 4 // expected-error {{Cannot reassign to value: 'd' is a 'let' constant}}

    let x: Int = 2
    f[x] = 3

    f[g[1] + c] = 2
    f[d + g[c]] = 2
  }

  mutating func bar() {
    var d: Bool = true
    d = false

    self.d = 5 // expected-error {{Cannot reassign to value: 'd' is a 'let' constant}}
  }
}
