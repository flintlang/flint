// RUN: %flintc %s --verify

contract InvalidTypes {
  var int: Int = 0
  var a: Int = 0
}

InvalidTypes :: (any) {
  public init() {}

  func foo() -> Bool {
    return int // expected-error {{Cannot convert expression of type 'Int' to expected return type 'Bool'}}
  }

  func bar() {
    return 2 // expected-error {{Cannot convert expression of type 'Int' to expected return type 'Void'}}
  }

  mutating func baz() {
    var a: Bool = true
    a = b // expected-error {{Use of undeclared identifier 'b'}}

    int = true // expected-error {{Incompatible assignment between values of type 'Int' and 'Bool'}}

    f(a) // expected-error {{Function 'f' is not in scope or cannot be called using the caller capability 'any'. Perhaps argument labels are incorrect?}}

    f(self.int)
  }

  func f(a: Int) {}
}
