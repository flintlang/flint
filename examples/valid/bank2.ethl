contract Bank {
  var manager: Address
  var accounts: [Address: Int]
}

Bank :: (any) {
  public mutating func deposit(address: Address, amount: Int) {
    accounts[address] += amount
    // clear(address) errors: "Cannot call clear(Address) with capability (any)"
  }
}

Bank :: (a <- any(of: accounts.keys)) {
  public mutating func withdraw(amount: Int, recipient: Address) {
    let value = accounts[a]
    accounts[a] -= amount
    send(value, recipient)
  }
}

Bank :: (manager) {
  public mutating func clear(address: Address) {
    accounts[accountIndex] = 0
  }
} 
