// SimpleAuction.flint
//
// Allows a user to launch an auction and collect the highest bid.
// When the previous highest bidder is outbid, their bid is refunded
// immediately.

contract SimpleAuction {
  let beneficiary: Address
  var hasAuctionEnded: Bool = false

  var highestBidder: Address
  var highestBid: Wei = Wei(0)

  event highestBidDidIncrease {
    let bidder: Address
    let amount: Int
  }
  event auctionDidEnd {
    let winner: Address
    let bid: Int
  }
}

SimpleAuction :: caller <- (any) {
  public init() {
    beneficiary = caller
    highestBidder = caller
  }

  @payable
  public mutating func bid(implicit value: Wei) {
    if hasAuctionEnded { fatalError() }
    if value.getRawValue() <= highestBid.getRawValue() { fatalError() }

    if highestBid.getRawValue() > 0 {
      // Reimburse the previous highest bidder.
      send(highestBidder, &highestBid)
    }

    // Set the new highest bidder.
    highestBidder = caller

    // Record the new highest bid.
    highestBid.transfer(&value)

    emit highestBidDidIncrease(bidder: caller, amount: value.getRawValue())
  }

  public func getHighestBid() -> Int {
    return highestBid.getRawValue()
  }

  public func getHighestBidder() -> Address {
    return highestBidder
  }
}

SimpleAuction :: (beneficiary) {
  public mutating func endAuction() {
    if hasAuctionEnded { fatalError() }

    hasAuctionEnded = true

    send(beneficiary, &highestBid)
    emit auctionDidEnd(winner: highestBidder, bid: highestBid.getRawValue())
  }
}
